{
    "collab_server" : "",
    "contents" : "###############################################################\n#### This scrapes and cleans 2016 election results from bbc.com\n#### Author: Kevin Soo\n###############################################################\n\n# load libraries\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\n\n# get names of states\nstates <- read_html(\"http://www.bbc.com/news/world/us_and_canada/states\") %>%\n    html_nodes(\".gel-long-primer-bold\") %>% html_text()\n\n# get links of all pages\nlinks <- read_html(\"http://www.bbc.com/news/world/us_and_canada/states\") %>%\n    html_nodes(\".gel-long-primer-bold\") %>% html_attr('href')\nlinks <- paste(\"http://www.bbc.com\", links, sep=\"\")\n\n# directory of states\nbbc <- data.frame(states, links)\n\n# get data from each page\nfor (i in 1:nrow(bbc)) {\n    stateResult <- read_html(as.character(bbc$links[i])) %>% \n        html_nodes('.us2016-popular-vote__votes , .us2016-popular-vote__candidate-name') %>%\n        html_text()\n    \n    # get data from page into right format\n    stateResult <- matrix(stateResult, ncol=2, nrow=3, byrow=T)\n    colnames(stateResult) <- c(\"Candidate\", \"vote\")\n    stateResult <- data.frame(stateResult)\n    stateResult$Votes <- NA\n    \n    # clean 'votes'\n    for (j in 1:nrow(stateResult)) {\n        stateResult$Votes[j] <- as.numeric(gsub(\",\", \"\", str_extract_all(stateResult$vote[j],\"\\\\(?[0-9,.]+\\\\)?\")[[1]]))\n    }\n    \n    # state results\n    State <- rep(bbc$states[i], nrow(stateResult))\n    stateResult <- data.frame(State, select(stateResult, -vote))\n    \n    # save results\n    if (i==1) { election <- stateResult }\n    else { election <- rbind(election, stateResult) }\n}\n\n# compute national popular vote\nus <- election %>% group_by(Candidate) %>% summarise(Votes=sum(Votes))\nState <- rep(\"U.S.\", nrow(us))\nus <- data.frame(State, us)\nelection <- rbind(us, election)\n\n# compute vote total for each state\ntotals <- election %>% group_by(State) %>% summarise(Total=sum(Votes))\n\n# compute vote share\nelection$Level <- NA\nfor (i in 1:nrow(election)) {\n    stateTotal <- totals %>% filter(State==election$State[i]) %>% select(Total)\n    election$Level[i] <- (election$Votes[i]/stateTotal)*100\n}\n\n# final checks\nelection$Level <- as.numeric(election$Level)\n\n# save data\nsave(election, file=\"election.Rda\")\n",
    "created" : 1479177247992.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3098042589",
    "id" : "4BD25D98",
    "lastKnownWriteTime" : 1479315926,
    "last_content_update" : 1479315926057,
    "path" : "~/Box Sync/Personal/polls/scrape_results.R",
    "project_path" : "scrape_results.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}